using Com.RePower.DeviceBase.BaseDevice;

namespace Com.RePower.Device.TemperatureSensor.Impl.MtvTemperatureSensor
{
    public class MtvTemperatureSensorSimulator : MtvTemperatureSensorImpl
    {
        public MtvTemperatureSensorSimulator()
        {
            this.NetDeviceBase = new NetDeviceBaseSimulator();

            var temp = NetDeviceBase as NetDeviceBaseSimulator;
            if (temp is { })
                temp.RecoveryMethod += RecoveryMethod;
        }

        private byte[] RecoveryMethod(byte[] cmd)
        {
            byte[]? result = null;
            byte[] sendBytes = new byte[] { 0x43, 0x54, 0x4f, 0x44, 0x20, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0xb3, 0x5b };
            byte[] recoveryBytes = new byte[] { 0x64, 0x74, 0x70, 0x63, 0x20, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0e, 0x00, 0x01, 0x00, 0x56, 0x00, 0x00, 0x00, 0x06, 0x00, 0x28, 0xff, 0xff, 0x00, 0xa1, 0xa3 };

            byte[] cmdBase1 = new byte[] { 0x43, 0x54, 0x4f, 0x44, 0x20, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x01, 0x00, 0xb3, 0x68 };
            byte[] cmdBase2 = new byte[] { 0x43, 0x54, 0x4f, 0x44, 0x20, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x01, 0x00, 0xF3, 0x7d };
            byte[] recoveryBytes1 = new byte[] { 0x64, 0x74, 0x70, 0x63, 0x20, 0x00, 0x01, 0x00, 0x02, 0x00, 0xaa, 0x00, 0x01, 0x00, 0x30, 0xff, 0x00, 0xff, 0xff, 0xff
                , 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8
                , 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8
                , 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8
                , 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8
                , 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8
                , 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8
                , 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8
                , 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8, 0x00, 0x00, 0x31, 0xf8
                , 0x3b, 0x0e };
            if (cmd.SequenceEqual(sendBytes))
            {
                result = recoveryBytes;
            }
            else if (cmd.SequenceEqual(cmdBase1) || cmd.SequenceEqual(cmdBase2))
            {
                result = recoveryBytes1;
            }
            else
            {
                return cmd;
            }
            return result;
        }
    }
}